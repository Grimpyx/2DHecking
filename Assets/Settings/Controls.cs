//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Settings/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Hecker"",
            ""id"": ""6efca8c5-52dc-4460-a048-020ee7631eda"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d8185e69-cca4-4d4e-b43e-65994d8035b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""59bd52d9-07b1-47d4-8b84-56e4e1046794"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hook"",
                    ""type"": ""Button"",
                    ""id"": ""37e32d46-5648-4bf7-b369-6b37026d3aa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""7ca8a089-6ae9-4ce6-9070-00ac98bf737b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AimButton"",
                    ""type"": ""Button"",
                    ""id"": ""dcef1b9f-d3b2-4536-85ed-ef2b3ce7a065"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c99cda3-c389-4cff-b4a0-1ff26f9b4836"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62457eab-b8c5-40ab-8f61-c015cc2a533b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f93b4df0-a6e1-4320-9706-963e77062177"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55d443fc-174d-40bb-a16a-e250af5193ed"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""120560b1-ff76-4ad8-9a06-3e5c2f24404e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a36394ee-a692-4f71-a19d-b83b61eafad6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""64792d84-e8d1-49e5-befa-8168cd0a6f10"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cf46b598-353e-42e5-b054-aa3d2128037b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""42f32e63-a7db-47f2-8b0b-094b2f582d6b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0e8688d0-4333-42de-ad62-adec476bf44f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58da0d47-b3bc-4a78-a2ad-1fd786a5a3d1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78ec8b90-fb68-4900-9281-121d235f38d5"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""901e010f-f578-4a4f-b3e4-9f4fbadd6d88"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Hecker
        m_Hecker = asset.FindActionMap("Hecker", throwIfNotFound: true);
        m_Hecker_Jump = m_Hecker.FindAction("Jump", throwIfNotFound: true);
        m_Hecker_Move = m_Hecker.FindAction("Move", throwIfNotFound: true);
        m_Hecker_Hook = m_Hecker.FindAction("Hook", throwIfNotFound: true);
        m_Hecker_Aim = m_Hecker.FindAction("Aim", throwIfNotFound: true);
        m_Hecker_AimButton = m_Hecker.FindAction("AimButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hecker
    private readonly InputActionMap m_Hecker;
    private IHeckerActions m_HeckerActionsCallbackInterface;
    private readonly InputAction m_Hecker_Jump;
    private readonly InputAction m_Hecker_Move;
    private readonly InputAction m_Hecker_Hook;
    private readonly InputAction m_Hecker_Aim;
    private readonly InputAction m_Hecker_AimButton;
    public struct HeckerActions
    {
        private @Controls m_Wrapper;
        public HeckerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Hecker_Jump;
        public InputAction @Move => m_Wrapper.m_Hecker_Move;
        public InputAction @Hook => m_Wrapper.m_Hecker_Hook;
        public InputAction @Aim => m_Wrapper.m_Hecker_Aim;
        public InputAction @AimButton => m_Wrapper.m_Hecker_AimButton;
        public InputActionMap Get() { return m_Wrapper.m_Hecker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeckerActions set) { return set.Get(); }
        public void SetCallbacks(IHeckerActions instance)
        {
            if (m_Wrapper.m_HeckerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_HeckerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_HeckerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_HeckerActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_HeckerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_HeckerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_HeckerActionsCallbackInterface.OnMove;
                @Hook.started -= m_Wrapper.m_HeckerActionsCallbackInterface.OnHook;
                @Hook.performed -= m_Wrapper.m_HeckerActionsCallbackInterface.OnHook;
                @Hook.canceled -= m_Wrapper.m_HeckerActionsCallbackInterface.OnHook;
                @Aim.started -= m_Wrapper.m_HeckerActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_HeckerActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_HeckerActionsCallbackInterface.OnAim;
                @AimButton.started -= m_Wrapper.m_HeckerActionsCallbackInterface.OnAimButton;
                @AimButton.performed -= m_Wrapper.m_HeckerActionsCallbackInterface.OnAimButton;
                @AimButton.canceled -= m_Wrapper.m_HeckerActionsCallbackInterface.OnAimButton;
            }
            m_Wrapper.m_HeckerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Hook.started += instance.OnHook;
                @Hook.performed += instance.OnHook;
                @Hook.canceled += instance.OnHook;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @AimButton.started += instance.OnAimButton;
                @AimButton.performed += instance.OnAimButton;
                @AimButton.canceled += instance.OnAimButton;
            }
        }
    }
    public HeckerActions @Hecker => new HeckerActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IHeckerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnHook(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnAimButton(InputAction.CallbackContext context);
    }
}
